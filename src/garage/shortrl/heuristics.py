from garage.experiment import Snapshotter
import torch

def torch_value_wrapper(torch_value):
    def wrapped_fun(x):
        with torch.no_grad():
            # BUG: We need to package "obs" correctly (the way the value function object expects it to be packaged...)
            return torch_value(torch.Tensor(x))
    return wrapped_fun


def get_snapshot_values(path, itr='last'):
    # Load the value function from one of the snapshots generated by shortrl.ppo_pendulum_train_heuristics.
    snapshotter = Snapshotter()
    data = snapshotter.load(path, itr=itr)
    heuristic = torch_value_wrapper(data['algo']._value_function)
    # discount = data['algo']._discount
    return heuristic